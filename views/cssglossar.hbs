<header class="Header">
	<h2 class="Heading">Glossar</h2>
</header>
<main class="Main">
	<table class="Table">
		<tr>
			<td>animation-timing-function</td><td>describes how an animation should progress over each cycle</td>
		</tr>
		<tr>
			<td>cubic-bezier(x1, y1, x2, y2)</td><td>Was bedeuten die Werte?</td>
		</tr>
		<tr>
			<td>steps(number of steps, direction)</td><td>dividing the domain of output values in equidistant steps.</td>
		</tr>
		<tr>
			<td>animation</td><td>shorthand property</td>
		</tr>
		<tr>
			<td>animation-delay</td><td>specifies when an animation should start</td>
		</tr>
		<tr>
			<td>animation-direction</td><td>indicates whether the animation should play in reverse or alternate cycles</td>
		</tr>
		<tr>
			<td>animation-duration</td><td>length of time the animation should take to complete a cycle</td>
		</tr>
		<tr>
			<td>animation-fill-mode</td><td>specifies how a css animation should apply styles to its target before and after it is executing</td>
		</tr>
		<tr>
			<td>animation-iteration-count</td><td>number of times an animation cycle should be played</td>
		</tr>
		<tr>
			<td>animation-name</td><td>a list of animations that should be applied to the selected element</td>
		</tr>
		<tr>
			<td>animation-play-state</td><td>determines whether an animation is running or paused</td>
		</tr>
	</table>
	<table class="Table VisualFormatingTable">
		<tr>
			<td>left</td><td>specifies the distance between the left margin edge of the element and the left edge of it's containing block</td>
		</tr>
		<tr>
			<td>line-height</td><td>specifies the minimum height of line boxes within the element</td>
		</tr>
		<tr>
			<td>right</td><td>it specifies the distance between the right margin edge of the element and the right edge of its containing block.</td>
		</tr>
		<tr>
			<td>top</td><td>For absolutely positioned elements (those with position: absolute or position: fixed), it specifies the distance between the top margin edge of the element and the top edge of its containing block.</td>
		</tr>
		<tr>
			<td>vertical-align</td><td>specifies the vertical alignment of an inline or table-cell box</td>
		</tr>
		<tr>
			<td>z-index</td><td>specifies the z-order of a positioned element and its descendants</td>
		</tr>
	</table>
	<table class="Table TransitionTable">
		<tr>
			<td>transition-delay</td><td>The transition-delay CSS property specifies the amount of time to wait between a change being requested to a property that is to be transitioned and the start of the transition effect.</td>
		</tr>
		<tr>
			<td>transition-duration</td><td>specifies the time the transition should take to complete</td>
		</tr>
		<tr>
			<td>transition-property</td><td>specifies the names of CSS properties to which a transition effect should be applied</td>
		</tr>
		<tr>
			<td>transition-timing-function</td><td>describes how the intermediate value of css properties are calculated</td>
		</tr>
	</table>
	<table class="Table BackgroundTable">
		<tr>
			<td>background</td><td>shorthand property</td>
		</tr>
		<tr>
			<td>background-attachment</td><td>If a background-image is specified, the background-attachment CSS property determines whether that image's position is fixed within the viewport, or scrolls along with its containing block.</td>
		</tr>
		<tr>
			<td>background-clip</td><td>specifies whether an element's background, either the color or image, extends underneath its border</td>
		</tr>
		<tr>
			<td>background-color</td><td>sets the background color of an element</td>
		</tr>
		<tr>
			<td>background-image</td><td>sets one or several background images for an element</td>
		</tr>
		<tr>
			<td>background-origin</td><td>determines the positiong of the origin of an image </td>
		</tr>
		<tr>
			<td>background-position</td><td>set the initial position for each defined background image, relative to the background position layer defined by background-origin</td>
		</tr>
		<tr>
			<td>background-position-x</td><td>set the initial horizontal position, relative to the background position layer defined by background-origin</td>
		</tr>
		<tr>
			<td>background-position-y</td><td>sets the initial vertical position, relative to the background position defined by background-origin for each defined background image</td>
		</tr>
		<tr>
			<td>background-repeat</td><td>defines how background images are repeated</td>
		</tr>
		<tr>
			<td>background-size</td><td>specifies the size of the background images</td>
		</tr>
	</table>
	<table class="Table BorderTable">
		<tr>
			<td>border</td><td>shorthand property</td>
		</tr>
		<tr>
			<td>border-bottom</td><td>shorthand property</td>
		</tr>
		<tr>
			<td>border-bottom(right, left, top)-color</td><td>sets the color of the bottom(right, left, top) border of an element</td>
		</tr>
		<tr>
			<td>border-bottom(right, left, top)-left(right)-radius</td><td>sets the rounding of the bottom-left of the element</td>
		</tr>
		<tr>
			<td>border-bottom(right, left, top)-style</td><td>sets the line style of the bottom(right, left, top) border</td>
		</tr>
		<tr>
			<td>border-bottom(right, left, top)-width</td><td>sets the width of the bottom(right, left, top) border of a box</td>
		</tr>
		<tr>
			<td>border-color</td><td> shorthand for setting the color of the four sides of an element's border</td>
		</tr>
		<tr>
			<td>border-image</td><td>allows drawing an image on the borders of elements</td>
		</tr>
		<tr>
			<td>border-image-outset</td><td>describes by what amount the border image area extends beyond the border box</td>
		</tr>
		<tr>
			<td>border-image-repeat</td><td> defines how the middle part of a border image is handled so that it can match the size of the border</td>
		</tr>
		<tr>
			<td>border-image-slice</td><td>divides the image specified by border-image-source in nine regions</td>
		</tr>
		<tr>
			<td>border-image-source</td><td> defines the <image> to use instead of the style of the border</td>
		</tr>
		<tr>
			<td>border-image-width</td><td>defines the width of the border image by defining inward offsets from the border edges</td>
		</tr>
		<tr>
			<td>border-left</td><td>shorthand property that sets the values of border-left-color, border-left-style, and border-left-width</td>
		</tr>
		<tr>
			<td>border-radius</td><td>allows to define how rounded border corners are</td>
		</tr>
		<tr>
			<td>border-right</td><td>shorthand that sets the values of border-right-color, border-right-style, and border-right-width</td>
		</tr>
		<tr>
			<td>border-style</td><td>shorthand property for setting the line style for all four sides of the elementÂ´s border.</td>
		</tr>
		<tr>
			<td>border-width</td><td>shorthand property</td>
		</tr>
		<tr>
			<td>box-shadow</td><td>describes one or more shadow effects as a comma-separated list.</td>
		</tr>
	</table>
	<table class="Table BoxModelTable">
		<tr>
			<td>display</td><td>specifies the type of rendering box used for an element</td>
		</tr>
		<tr>
			<td>width</td><td>The width property specifies the width of the content area of an element</td>
		</tr>
		<tr>
			<td>float</td><td> specifies that an element should be placed along the left or right side of its container, where text and inline elements will wrap around it</td>
		</tr>
		<tr>
			<td>height</td><td>specifies the height of the content area of an element</td>
		</tr>
		<tr>
			<td>margin</td><td>sets the margin for all four sides</td>
		</tr>
		<tr>
			<td>margin-bottom(right, left, top)</td><td>sets the margin space required on the bottom(right, left, top) of an element</td>
		</tr>
		<tr>
			<td>overflow</td><td>Using the overflow property with a value different to visible (its default) will create a new block formatting context. </td>
		</tr>
		<tr>
			<td>overflow-x</td><td>specifies whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the left and right edges.</td>
		</tr>
		<tr>
			<td>overflow-y</td><td>whether to clip content, render a scroll bar, or display overflow content of a block-level element, when it overflows at the top and bottom edges.</td>
		</tr>
		<tr>
			<td>padding</td><td>sets the padding space on all sides of an element</td>
		</tr>
		<tr>
			<td>padding-bottom</td><td>sets the height of the padding area at the bottom of an element</td>
		</tr>
		<tr>
			<td>padding-left</td><td>sets the padding space required on the left side of an element</td>
		</tr>
		<tr>
			<td>padding-right</td><td>sets the padding space required on the right side of an element</td>
		</tr>
		<tr>
			<td>padding-top</td><td> sets the padding space required on the top of an element</td>
		</tr>
		<tr>
			<td>visibility</td><td>can be used to hide an element while leaving the space where it would have been</td>
		</tr>
	</table>
	<table class="Table BasicTable">
		<tr>
			<td>:default</td><td>represents any user interface element that is the default among a group of similar elements.</td>
		</tr>
		<tr>
			<td>:indeterminate</td><td>any input type="checkbox" element whose indeterminate DOM property is set to true by JavaScript or input type="radio" elements whose radio button group's radio buttons are all unchecked or progress elements in an indeterminate state</td>
		</tr>
		<tr>
			<td>:invalid</td><td> represents any input or form element whose content fails to validate according to the input's type setting.</td>
		</tr>
		<tr>
			<td>:optional</td><td>represents any input or textarea element that does not have the required attribute set on it.</td>
		</tr>
		<tr>
			<td>:required</td><td>represents any input element that has the required attribute set on it</td>
		</tr>
		<tr>
			<td>:valid</td><td>represents any input or form element whose content validates correctly according to the input's type setting</td>
		</tr>
		<tr>
			<td>appearance</td><td> indicates whether to display an element using platform-native styling based on the operating system's theme or not.</td>
		</tr>
		<tr>
			<td>box-sizing</td><td>property is used to alter the default CSS box model used to calculate width and height of the elements.</td>
		</tr>
		<tr>
			<td>caret-color</td><td>specifies the color of the caret</td>
		</tr>
		<tr>
			<td>cursor</td><td>specifies the mouse cursor displayed when the mouse pointer is over an element.</td>
		</tr>
		<tr>
			<td>outline</td><td>is a shorthand property for setting one or more of the individual outline properties</td>
		</tr>	
		<tr>
			<td>outline-color</td><td>property sets the color of the outline of an element</td>
		</tr>	
		<tr>
			<td>outline-offset</td><td> is used to set space between an outline and the edge or border of an element</td>
		</tr>	
		<tr>
			<td>outline-style</td><td> is used to set the style of the outline of an element</td>
		</tr>	
		<tr>
			<td>outline-width</td><td> is used to set the width of the outline of an element</td>
		</tr>	
		<tr>
			<td>resize</td><td>lets you control the resizability of an element.</td>
		</tr>	
		<tr>
			<td>text-overflow</td><td>determines how overflowed content that is not displayed is signaled to users</td>
		</tr>	
		<tr>
			<td>x user-select</td><td>Controls the actual Selection operation</td>
		</tr>	
	</table>
	<table class="Table AlignmentTable">
		<tr>
			<td>align-self</td><td>aligns flex items of the current flex line overriding the align-items value</td>
		</tr>
		<tr>
			<td>justify-items</td><td>property defines the default justify-self for all items of the box, given them the default way of justifying each box along the appropriate axis.</td>
		</tr>
		<tr>
			<td>justify-self</td><td>defines the way of justifying a box inside its container along the appropriate axis.</td>
		</tr>
	</table>
	<table class="Table CascadingTable">
		<tr>
			<td>all</td><td>shorthand property resets all properties</td>
		</tr>
		<tr>
	</table>
	<table class="Table ColorTable">
		<tr>
			<td>color</td><td>sets the foreground color on an element's text content</td>
		</tr>
	</table>
	<table class="Table ConpositionTable">
		<tr>
			<td>background-blend-mode</td><td>describes how the element's background images should blend with each other and the element's background color.</td>
		</tr>
		<tr>
			<td>isolation</td><td>defines if the element must create a new stacking context</td>
		</tr>
		<tr>
			<td>mix-blend-mode</td><td>property describes how an element's content should blend with the content of the element's direct parent and the element's background.</td>
		</tr>
	</table>
	<table class="Table ConditionalTable">
		<tr>
			<td>@supports</td><td>gives CSS the ability to perform a feature query.</td>
		</tr>
		<tr>
			<td>@charset</td><td>Defines the character set used by the style sheet.</td>
		</tr>
		<tr>
			<td>@import</td><td>Tells the CSS engine to include an external style sheet.</td>
		</tr>
		<tr>
			<td>@namespace </td><td>all its content must be considered prefixed with an XML namespace.</td>
		</tr>
		<tr>
			<td>@media </td><td>will apply its content if the device meets the criteria of the condition defined using a media query.</td>
		</tr>
		<tr>
			<td>@supports</td><td>A conditional group rule which will apply its content if the browser meets the criteria of the given condition.</td>
		</tr>
		<tr>
			<td>@document</td><td> A conditional group rule which will apply its content if the document in which the style sheet is applied meets the criteria of the given condition.</td>
		</tr>
		<tr>
			<td>@page</td><td>Describes the aspect of layout changes which will be applied when printing the document.</td>
		</tr>
		<tr>
			<td>@font-face</td><td>Describes the aspect of an external font to be downloaded.</td>
		</tr>
		<tr>
			<td>@keyframes</td><td>Describes the aspect of intermediate steps in a CSS animation sequence.</td>
		</tr>
		<tr>
			<td>@viewport</td><td>Describes the aspects of the viewport for small screen devices. </td>
		</tr>
		<tr>
			<td>@counter-style </td><td>Defines specific counter styles that are not part of the predefined set of styles</td>
		</tr>
		<tr>
			<td>@font-feature-values</td><td> Define common names in font-variant-alternates for feature activated differently in OpenType</td>
		</tr>
	</table>
	<table class="Table CounterTable">
		<tr>
			<td>@counter-style</td><td> lets authors define specific counter styles that are not part of the predefined set of styles.</td>
		</tr>
		<tr>
			<td>system</td><td>Specifies the algorithm to be used for converting the integer value of a counter to a string representation.</td>
		</tr>
		<tr>
			<td>negative</td><td>Lets the author specify symbols to be appended or prepended to the counter representation if the value is negative.</td>
		</tr>
		<tr>
			<td>prefix</td><td>Specifies a symbol that should be prepended to the marker representation. </td>
		</tr>
		<tr>
			<td>suffix</td><td>Specifies, similar to the prefix descriptor, a symbol that is appended to the marker representation. </td>
		</tr>
		<tr>
			<td>range</td><td>Defines the range of values over which the counter style is applicable.</td>
		</tr>
		<tr>
			<td>pad</td><td>Is used when you need the marker representations to be of a minimum length.</td>
		</tr>
		<tr>
			<td>fallback</td><td>Specifies a system to fall back into if either the specified system is unable to construct the representation of or a counter value or if the counter value outside the specified range</td>
		</tr>
		<tr>
			<td>symbols</td><td>Specifies the symbols that are to be used for the marker representations.</td>
		</tr>
		<tr>
			<td>additive-symbols</td><td>While the symbols specified in the symbols descriptor is used for constructing marker representation by most algorithms, some systems such as 'additive' rely on additive tuples described in this descriptor</td>
		</tr>
		<tr>
			<td>speak-as</td><td>Describes how to read out the counter style in speech synthesizers, such as screen readers.</td>
		</tr>
	</table>	
	<table class="Table DeviceTable">
		<tr>
			<td>@viewport</td><td>These descriptors control viewport settings, primarily on mobile devices.</td>
		</tr>
		<tr>
			<td>min-width</td><td>Used in the determination of the width of the viewport when the document is first displayed.</td>
		</tr>
		<tr>
			<td>max-width</td><td>Used in the determination of the width of the viewport when the document is first displayed</td>
		</tr>
		<tr>
			<td>width</td><td>A shorthand descriptor for setting both min-width and max-width</td>
		</tr>
		<tr>
			<td>min-height</td><td>Used in the determination of the height of the viewport when the document is first displayed.</td>
		</tr>
		<tr>
			<td>max-height</td><td>Used in the determination of the height of the viewport when the document is first displayed.</td>
		</tr>
		<tr>
			<td>height</td><td>A shorthand descriptor for setting both min-height and max-height</td>
		</tr>
		<tr>
			<td>zoom</td><td>Sets the initial zoom factor.</td>
		</tr>
		<tr>
			<td>min-zoom</td><td>Sets the minimum zoom factor.</td>
		</tr>
		<tr>
			<td>max-zoom</td><td>Sets the maximum zoom factor.</td>
		</tr>
		<tr>
			<td>user-zoom</td><td>Controls whether or not the user should be able to change the zoom factor.</td>
		</tr>
		<tr>
			<td>orientation</td><td>Controls the document's orientation.</td>
		</tr>
	</table>
	<table class="Table FilterTable">
		<tr>
			<td>backdrop-filter</td><td> provides for effects like blurring or color shifting the area behind an element, which can then be seen through that element by adjusting the element's transparency/opacity.</td>
		</tr>
		<tr>
			<td>filter</td><td>property provides graphical effects like blurring, sharpening, or color shifting an element</td>
		</tr>
	</table>
	<table class="Table FlexBoxTable">
		<tr>
			<td>align-content</td><td> property defines how the browser distributes space between and around content items along the main-axis of their container</td>
		</tr>
		<tr>
			<td>align-items</td><td> property defines how the browser distributes space between and around flex items along the cross-axis of their container</td>
		</tr>
		<tr>
			<td>flex</td><td>property is a shorthand property specifying the ability of a flex item to alter its dimensions to fill available space</td>
		</tr>
		<tr>
			<td>flex-basis</td><td> property specifies the flex basis which is the initial main size of a flex item</td>
		</tr>
		<tr>
			<td>flex-direction</td><td> property specifies how flex items are placed in the flex container defining the main axis and the direction (normal or reversed).</td>
		</tr>
		<tr>
			<td>flex-flow</td><td>property is a shorthand property for flex-direction and flex-wrap individual properties.</td>
		</tr>
		<tr>
			<td>flex-grow</td><td>property specifies the flex grow factor of a flex item.It specifies what amount of space inside the flex container the item should take up.</td>
		</tr>
		<tr>
			<td>flex-shrink</td><td> property specifies the flex shrink factor of a flex item.</td>
		</tr>
		<tr>
			<td>flex-wrap</td><td>property specifies whether flex items are forced into a single line or can be wrapped onto multiple lines</td>
		</tr>
		<tr>
			<td>justify-content</td><td> defines how the browser distributes space between and around content items along the main axis of their container.</td>
		</tr>
		<tr>
			<td>min-height</td><td>used to set the minimum height of a given element</td>
		</tr>
		<tr>
			<td>min-width</td><td> used to set the minimum width of a given element.</td>
		</tr>
		<tr>
			<td>order</td><td>specifies the order used to lay out flex items in their flex container</td>
		</tr>
	</table>
	<table class="Table FontsTable">
		<tr>
			<td>@font-face</td><td>allows to specify online fonts to display text  </td>
		</tr>
		<tr>
			<td>font-family</td><td>Specifies a name that will be used as the font face value for font properties.</td>
		</tr>
		<tr>
			<td>src</td><td>Specifies the resource containing the font data. This can be a URL to a remote font file location or the name of a font on the user's computer.</td>
		</tr>
		<tr>
			<td>font-variant</td><td>property acts as a shorthand </td>
		</tr>
		<tr>
			<td>font-stretch</td><td> selects a normal, condensed, or expanded face from a font.</td>
		</tr>
		<tr>
			<td>font-weight</td><td>specifies the weight or boldness of the font</td>
		</tr>
		<tr>
			<td>font-style</td><td>lets you select italic or oblique faces within a font-family.</td>
		</tr>
		<tr>
			<td>unicode-range</td><td>The range of Unicode code points to be used from the font.</td>
		</tr>
	</table>
	<table class="Table FragmentationTable">
		<tr>
			<td>box-decoration-break</td><td>property specifies how the background, padding, border, border-image, box-shadow, margin and clip of an element is applied when the box for the element is fragmented. </td>
		</tr>
		<tr>
			<td>break-after</td><td>The break-after CSS property describes the page, column, or region break behavior (in other words, how and whether to break) after the generated box</td>
		</tr>
		<tr>
			<td>break-before</td><td> describes the page, column or region break behavior before the generated box</td>
		</tr>
		<tr>
			<td>break-inside</td><td> describes how the page, column or region break inside the generated box.</td>
		</tr>
		<tr>
			<td>orphans</td><td>property refers to the minimum number of lines in a block container that must be left at the bottom of the page</td>
		</tr>
		<tr>
			<td>widows</td><td>defines the minimum number of lines that must be left at the top of the second page</td>
		</tr>
	</table>
	<table class="Table FullscreenTable">
		<tr>
			<td>::backdrop</td><td>The ::backdrop pseudo-element can be used to create a backdrop that hides the underlying document for an element in the top layer's stack,</td>
		</tr>
		<tr>
			<td>:fullscreen</td><td>pseudo-class applies to any element that's currently being displayed in full-screen mode</td>
		</tr>
	</table>
	<table class="Table GeneratedTable">
		<tr>
			<td>content</td><td>property is used with the ::before and ::after pseudo-elements to generate content in an elemen</td>
		</tr>
	</table>
	<table class="Table GridTable">
		<tr>
			<td>grid</td><td> shorthand property that sets all of the explicit grid properties</td>
		</tr>
		<tr>
			<td>grid-area</td><td>shorthand property specifying a grid itemâs size and location within the grid row</td>
		</tr>
		<tr>
			<td>grid-auto-columns</td><td>specifies the size of an implicitly-created grid column track</td>
		</tr>
		<tr>
			<td>grid-auto-flow</td><td>controls how the auto-placement algorithm works</td>
		</tr>
		<tr>
			<td>grid-auto-rows</td><td>specifies the size of an implicitly-created grid row track.</td>
		</tr>
		<tr>
			<td>grid-column</td><td> shorthand property for grid-column-start and grid-column-end specifying a grid itemâs size</td>
		</tr>
		<tr>
			<td>grid-column-end</td><td>specifies a grid itemâs end position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-end edge of its grid area</td>
		</tr>
		<tr>
			<td>grid-column-gap</td><td> specifies the gutter between grid columns</td>
		</tr>
		<tr>
			<td>grid-column-start</td><td> specifies a grid itemâs start position within the grid column by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the block-start edge of its grid area</td>
		</tr>
		<tr>
			<td>grid-gap</td><td>a shorthand property for grid-row-gap and grid-column-gap specifying the gutters between grid rows and columns.</td>
		</tr>
		<tr>
			<td>grid-row</td><td> shorthand property for grid-row-start and grid-row-end</td>
		</tr>
		<tr>
			<td>grid-row-end</td><td> property specifies a grid itemâs end position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement</td>
		</tr>
		<tr>
			<td>grid-row-gap</td><td> property specifies the gutter between grid rows.</td>
		</tr>
		<tr>
			<td>grid-row-start</td><td> property specifies a grid itemâs start position within the grid row by contributing a line, a span, or nothing (automatic) to its grid placement, thereby specifying the inline-start edge of its grid area.</td>
		</tr>
		<tr>
			<td>grid-template</td><td>The grid-template CSS property is a shorthand property for defining grid columns, rows and areas</td>
		</tr>
		<tr>
			<td>grid-template-areas</td><td> property specifies named grid areas</td>
		</tr>
		<tr>
			<td>grid-template-columns</td><td> CSS property defines the line names and track sizing functions of the grid columns</td>
		</tr>
		<tr>
			<td>grid-template-rows</td><td>CSS property defines the line names and track sizing functions of the grid rows.</td>
		</tr>
	</table>
	<table class="Table ImageTable">
		<tr>
			<td>image-orientation</td><td>property describes how to correct the default orientation of an image.v</td>
		</tr>
		<tr>
			<td>image-rendering</td><td> property provides a hint to the browser about the algorithm it should use to scale images</td>
		</tr>
		<tr>
			<td>object-fit</td><td>property specifies how the contents of a replaced element should be fitted to the box established by its used height and width.</td>
		</tr>
		<tr>
			<td>object-position</td><td>property determines the alignment of the replaced element inside its box.</td>
		</tr>
	</table>
	<table class="Table InlineValues">
		<tr>
			<td>initial-letter</td><td>property specifies styling for dropped, raised, and sunken initial letters.</td>
		</tr>
		<tr>
			<td>initial-letter</td><td>specifies the alignment of initial letters within a paragraph.</td>
		</tr>
	</table>
	<table class="Table ListTable">
		<tr>
			<td>::marker</td><td>pseudo-element represents the marker box of a list item</td>
		</tr>
		<tr>
			<td>counter-increment</td><td>property is used to increase the value of CSS Counters by a given value. </td>
		</tr>
		<tr>
			<td>counter-reset</td><td> property is used to reset CSS Counters to a given value.</td>
		</tr>
		<tr>
			<td>list-style</td><td> shorthand property for setting list-style-type, list-style-image and list-style-position.</td>
		</tr>
		<tr>
			<td>list-style-image</td><td>property specifies an image to be used as the list item marker.</td>
		</tr>
		<tr>
			<td>list-style-position</td><td> property specifies the position of the marker box in the principal block box.</td>
		</tr>
		<tr>
			<td>list-style-type</td><td> property specifies the appearance of a list item element.</td>
		</tr>
	</table>
	<table class="Table LogicalTable">
		<tr>
			<td>block-size</td><td>property defines the horizontal or vertical size of an element's block depending on its writing mode. It corresponds to the width or the height property depending on the value defined for writing-mode.</td>
		</tr>
		<tr>
			<td>border-block-end</td><td>property is a shorthand property for setting the individual logical block end border property values in a single place in the style sheet.</td>
		</tr>
		<tr>
			<td>border-block-end-color</td><td>property defines the color of the logical block end border of an element, which maps to a physical border color depending on the element's writing mode, directionality, and text orientation</td>
		</tr>
		<tr>
			<td>border-block-end-style</td><td> property defines the style of the logical block end border of an element, which maps to a physical border style depending on the element's writing mode, directionality, and text orientation.</td>
		</tr>
		<tr>
			<td>border-block-end-width</td><td>defines the width of the logical block end border of an element, which maps to a physical border width depending on the element's writing mode, directionality, and text orientation</td>
		</tr>
		<tr>
			<td>border-block-start</td><td> shorthand property for setting the individual logical block start border property values</td>
		</tr>
		<tr>
			<td>border-block-start-color</td><td>defines the color of the logical block start border of an element, which maps to a physical border color depending on the element's writing mode, </td>
		</tr>
		<tr>
			<td>border-block-start-style</td><td> defines the style of the logical block start border of an element, which maps to a physical border style depending on the element's writing mode, </td>
		</tr>
		<tr>
			<td>border-block-start-width</td><td> defines the width of the logical block start border of an element, which maps to a physical border width depending on the element's writing mode, </td>
		</tr>
		<tr>
			<td>border-inline-end</td><td>property is a shorthand property for setting the individual logical inline end border property values in a single place in the style sheet.</td>
		</tr>
		<tr>
			<td>border-inline-end-color</td><td>property defines the color of the logical inline end border of an element</td>
		</tr>
		<tr>
			<td>border-inline-end-style</td><td>property defines the style of the logical inline end border of an element</td>
		</tr>
		<tr>
			<td>border-inline-end-width</td><td>defines the width of the logical inline end border of an element</td>
		</tr>
		<tr>
			<td>border-inline-start</td><td>shorthand property for setting the individual logical inline start border property values in a single place in the style sheet</td>
		</tr>
		<tr>
			<td>border-inline-start-color</td><td>property defines the color of the logical inline start border of an element</td>
		</tr>
		<tr>
			<td>border-inline-start-style</td><td>property defines the style of the logical inline start border of an element</td>
		</tr>
		<tr>
			<td>border-inline-start-width</td><td>property defines the width of the logical inline start border of an element</td>
		</tr>
		<tr>
			<td>margin-block-end</td><td>defines the logical block end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation.</td>
		</tr>
		<tr>
			<td>margin-block-start</td><td>defines the logical block start margin of an element, which maps to a physical margin depending on the element's writing mode</td>
		</tr>
		<tr>
			<td>margin-inline-end</td><td>property defines the logical inline end margin of an element, which maps to a physical margin depending on the element's writing mode, directionality, and text orientation</td>
		</tr>
		<tr>
			<td>margin-inline-start</td><td> defines the logical inline start margin of an element</td>
		</tr>
		<tr>
			<td>max-block-size</td><td>property defines the horizontal or vertical maximal size of an element's block depending on its writing mode</td>
		</tr>
		<tr>
			<td>max-inline-size</td><td>property defines the horizontal or vertical maximal size of an element's block depending on its writing mode</td>
		</tr>
		<tr>
			<td>min-block-size</td><td> property defines the horizontal or vertical minimal size of an element's block depending on its writing mode.</td>
		</tr>
		<tr>
			<td>min-inline-size</td><td>property defines the horizontal or vertical minimal size of an element's block depending on its writing mode</td>
		</tr>
		<tr>
			<td>offset-block-end</td><td> property defines the logical block end offset of an element</td>
		</tr>
		<tr>
			<td>offset-block-start</td><td> defines the logical block start offset of an element</td>
		</tr>
		<tr>
			<td>offset-inline-end</td><td> defines the logical inline end offset of an element</td>
		</tr>
		<tr>
			<td>offset-inline-start</td><td>property defines the logical inline start offset of an element</td>
		</tr>
		<tr>
			<td>padding-block-end</td><td> property defines the logical block end padding of an element</td>
		</tr>
		<tr>
			<td>padding-block-start</td><td>defines the logical block start padding of an element</td>
		</tr>
		<tr>
			<td>padding-inline-end</td><td>defines the logical inline end padding of an element,</td>
		</tr>
		<tr>
			<td>padding-inline-start</td><td>defines the logical inline start padding of an element</td>
		</tr>
	</table>
	<table class="Table MaskingTable">
		<tr>
			<td>mask-clip</td><td>property determines the area, which is affected by a mask</td>
		</tr>
		<tr>
			<td>mask-composite</td><td>property represents a compositing operation used on the current mask layer with the mask layers below it.</td>
		</tr>
		<tr>
			<td>mask-image</td><td> property sets the image that is used as mask layer for an element.</td>
		</tr>
		<tr>
			<td>mask-mode</td><td>property indicates whether the mask reference defined by mask-image is treated as a luminance or alpha mask.</td>
		</tr>
		<tr>
			<td>mask-origin</td><td> property determines the origin of a mask.</td>
		</tr>
		<tr>
			<td>mask-position</td><td>property sets the initial position, relative to the mask position layer defined by  mask-origin for each defined mask image.</td>
		</tr>
		<tr>
			<td>mask-repeat</td><td> defines how mask images are repeated</td>
		</tr>
		<tr>
			<td>mask-size</td><td>property specifies the sizes of the mask images</td>
		</tr>
		<tr>
			<td>mask-type</td><td>The CSS mask-type property defines if a mask defined by an SVG mask element is used as a luminance or an alpha mask</td>
		</tr>
	</table>
	<table class="Table MediaTable">
		<tr>
			<td>@media</td><td>associates a set of nested statements with a condition defined by a media query</td>
		</tr>
		<tr>
			<td>@media.any-hover</td><td> media feature that can be used to check whether any available input mechanism allows the user to hover over elements.</td>
		</tr>
		<tr>
			<td>@media.any-pointer</td><td>CSS media feature that can be used to check whether any available input mechanism is a pointing device, and if so, how accurate it is.</td>
		</tr>
		<tr>
			<td>@media.aspect-ratio</td><td>media feature whose value is the width-to-height aspect <ratio> of the viewport. It has min and max attributes.</td>
		</tr>
		<tr>
			<td>@media.color</td><td>a CSS media feature whose value is the integer number of bits per color component (red, green, blue) of the feature. CSS colors can either be defined in hexidecimal format or in an RGB format.</td>
		</tr>
		<tr>
			<td>@media.color-index</td><td> media feature whose value is the integer number of entries in the output device's color lookup table, or zero if the device does not use such a table.</td>
		</tr>
		<tr>
			<td>@media.display-mode</td><td>CSS media feature that selectively applies CSS based on the display mode of the application</td>
		</tr>
		<tr>
			<td>@media.grid</td><td>media feature whose value is an mq-boolean indicating whether or not the device is a grid or bitmap.</td>
		</tr>
		<tr>
			<td>@media.height</td><td>height is a CSS media feature whose value is the viewport's height as a CSS length</td>
		</tr>
		<tr>
			<td>@media.hover</td><td>CSS media feature that can be used to check whether the primary input mechanism allows the user to hover over elements.</td>
		</tr>
		<tr>
			<td>@media.inverted-colors</td><td>inverted-colors is a CSS media feature that can be used to check whether the user agent or underlying OS is inverting colors.</td>
		</tr>
		<tr>
			<td>@media.light-level</td><td>light-level is a CSS media feature that can be used to check the current ambient light level.</td>
		</tr>
		<tr>
			<td>@media.monochrome</td><td>monochrome is a CSS media feature whose value is the integer number of bits per pixel in the output device's monochrome frame buffer, or 0 if the device is not monochrome.</td>
		</tr>
		<tr>
			<td>@media.orientation</td><td>orientation is a CSS media feature that can be used to check what the orientation of the viewport is.</td>
		</tr>
		<tr>
			<td>@media.overflow-block</td><td>overflow-block is a CSS media feature that can be used to check how the output device handles content that overflows the viewport along the block axis.</td>
		</tr>
		<tr>
			<td>@media.overflow-inline</td><td>overflow-inline is a CSS media feature which can be used to indicate whether content that overflows the viewport along the inline axis can be scrolled.</td>
		</tr>
		<tr>
			<td>@media.pointer</td><td>pointer is a CSS media feature that can be used to check whether the primary input mechanism is a pointing device, and if so, how accurate it is.</td>
		</tr>
		<tr>
			<td>@media.resolution</td><td>resolution is a CSS media feature whose value is the pixel density of the output device, as a CSS resolution</td>
		</tr>
		<tr>
			<td>@media.scan</td><td> feature that can be used to check what the scanning process (if any) of the output device is.</td>
		</tr>
		<tr>
			<td>@media.scripting</td><td>scripting is a CSS media feature that can be used to check whether scripting (e.g., JavaScript) is available.</td>
		</tr>
		<tr>
			<td>@media.update-frequency</td><td>update is a CSS media feature that can be used to check how quickly (if at all) the output device is able to modify the appearance of the content.</td>
		</tr>
		<tr>
			<td>@media.width</td><td>width is a CSS media feature that can be used to apply styles conditionally based on the width of the viewport. The width must be specified as a length value.</td>
		</tr>
	</table>
	<table class="Table MiscTable">
		<tr>
			<td>touch-action</td><td>specifies whether, and in what ways, a given region can be manipulated by the user via a touchscreen (for instance, by panning or zooming features built into the browser).</td>
		</tr>
		<tr>
			<td>text-indent</td><td>amount of indentation (empty space) should be left before lines of text in a block</td>
		</tr>
		<tr>
			<td>text-transform</td><td> specifies how to capitalize an element's text.</td>
		</tr>
		<tr>
			<td>word-spacing</td><td>specifies the spacing behavior between tags and words.</td>
		</tr>
		<tr>
			<td>border-collapse</td><td>property determines whether a table's borders are separated or collapsed</td>
		</tr>
		<tr>
			<td>border-spacing</td><td>property specifies the distance between the borders of adjacent table cells </td>
		</tr>
		<tr>
			<td>bottom</td><td> property participates in specifying the position of positioned elements.</td>
		</tr>
		<tr>
			<td>caption-side</td><td>property positions the content of a table's caption on the specified side.</td>
		</tr>
		<tr>
			<td>empty-cells</td><td> property specifies how user agents should render borders and backgrounds around cells that have no visible content.</td>
		</tr>
		<tr>
			<td>max-height</td><td>property is used to set the maximum height of an element</td>
		</tr>
		<tr>
			<td>max-width</td><td>property is used to set the maximum width of a given element.</td>
		</tr>
		<tr>
			<td>quotes</td><td>property indicates how user agents should render quotation marks.</td>
		</tr>
		<tr>
			<td>table-layout</td><td>property defines the algorithm to be used to lay out table cells, rows, and columns.</td>
		</tr>
	</table>
	<table class="Table MotionTable">
		<tr>
			<td>offset</td><td> property is a shorthand property for animating an element along a defined path.</td>
		</tr>
		<tr>
			<td>offset-distance</td><td>property specifies a position along an offset-path.</td>
		</tr>
		<tr>
			<td>offset-path</td><td>property specifies the offset path where the element gets positioned.</td>
		</tr>
		<tr>
			<td>offset-rotate</td><td>The offset-rotate CSS property defines the direction of the element while positioning along the offset path.</td>
		</tr>
	</table>
	<table class="Table MultiColumnTable">
		<tr>
			<td>column-count</td><td>property describes the number of columns of the element.</td>
		</tr>
		<tr>
			<td>column-fill</td><td>property controls how contents are partitioned into columns.</td>
		</tr>
		<tr>
			<td>column-gap</td><td>property sets the size of the gap between columns for elements which are specified to be displayed as multi-column elements.</td>
		</tr>
		<tr>
			<td>column-rule</td><td>In multi-column layouts, the column-rule CSS property specifies a straight line, or "rule", to be drawn between each column.</td>
		</tr>
		<tr>
			<td>column-rule-color</td><td> property lets you set the color of the "rule" or line drawn between columns in multi-column layouts.</td>
		</tr>
		<tr>
			<td>column-rule-style</td><td> property lets you set the style of the rule drawn between columns in multi-column layouts.</td>
		</tr>
		<tr>
			<td>column-rule-width</td><td>property lets you set the width of the rule drawn between columns in multi-column layouts.</td>
		</tr>
		<tr>
			<td>column-span</td><td> property makes it possible for an element to span across all columns when its value is set to all</td>
		</tr>
		<tr>
			<td>column-width</td><td>property suggests an optimal column width</td>
		</tr>
		<tr>
			<td>columns</td><td> shorthand property allowing to set both the column-width and the column-count properties at the same time.</td>
		</tr>
	</table>
	<table class="Table ObjectModelTable">
		<tr>
			<td>scroll-behavior</td><td>specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSSOM scrolling APIs</td>
		</tr>
	</table>
	<table class="Table PagedTable">
		<tr>
			<td>:first</td><td>describes the styling of the first page when printing a document.</td>
		</tr>
		<tr>
			<td>:left</td><td>pseudo-class matches any left page when printing a page. It allows to describe the styling of left-side pages.</td>
		</tr>
		<tr>
			<td>:right</td><td>pseudo-class matches any right page when printing a page. It allows to describe the styling of right-side page.</td>
		</tr>
		<tr>
			<td>@page.bleed</td><td> descriptor specifies the extent of the page bleed area outside the page box. This property only has effect if crop marks are enabled using the marks property.</td>
		</tr>
		<tr>
			<td>@page.marks</td><td>descriptor adds crop and/or cross marks to the presentation of the document. Crop marks indicate where the page should be cut. Cross marks are used to align sheets.</td>
		</tr>
		<tr>
			<td>@page.size</td><td>The size CSS at-rule descriptor, used with the @page at-rule, defines the size and orientation of the box which is used to represent a page</td>
		</tr>
		<tr>
			<td>page-break-after</td><td>The page-break-after CSS property adjusts page breaks after the current element.</td>
		</tr>
		<tr>
			<td>page-break-before</td><td>The page-break-before CSS property adjusts page breaks before the current element.</td>
		</tr>
		<tr>
			<td>page-break-inside</td><td>property adjusts page breaks inside the current element.</td>
		</tr>
	</table>
	<table class="Table PositionedTable">
		<tr>
			<td>position</td><td>property chooses alternative rules for positioning elements, designed to be useful for scripted animation effects.</td>
		</tr>
	</table>
	<table class="Table PseudoTable">
		<tr>
			<td>::grammar-error</td><td> CSS pseudo-element represents a text segment which the browser has flagged as having grammatical error</td>
		</tr>
		<tr>
			<td>::placeholder</td><td>The ::placeholder CSS pseudo-element represents the placeholder text of a form element.</td>
		</tr>
		<tr>
			<td>::selection</td><td>CSS pseudo-element applies rules to the portion of a document that has been highlighted (e.g. selected with the mouse or another pointing device) by the user.</td>
		</tr>
		<tr>
			<td>::spelling-error</td><td>pseudo-element represents a text segment which the browser has flagged as incorrectly spelled.</td>
		</tr>
	</table>
	<table class="Table RubyTable">
		<tr>
			<td>ruby-align</td><td> CSS property defines the distribution of the different ruby elements over the base.</td>
		</tr>
		<tr>
			<td>ruby-position</td><td>CSS property defines the position of a ruby element relatives to its base element.</td>
		</tr>
	</table>
	<table class="Table SVGTable">
		<tr>
			<td>clip-path</td><td>CSS property prevents a portion of an element from getting displayed by defining a clipping region to be displayed</td>
		</tr>
		<tr>
			<td>letter-spacing</td><td>The letter-spacing CSS property specifies spacing behavior between text characters.</td>
		</tr>
		<tr>
			<td>mask</td><td> allows users to alter the visibility of an item by either partially or fully hiding it.</td>
		</tr>
		<tr>
			<td>pointer-events</td><td>controls under what circumstances (if any) a particular graphic element can become the target of mouse events.</td>
		</tr>
		<tr>
			<td>text-rendering</td><td>The text-rendering CSS property provides information to the rendering engine about what to optimize for when rendering text.</td>
		</tr>
	</table>
	<table class="Table ScrollTable">
		<tr>
			<td>scroll-snap-type</td><td>property defines how strictly snap points are enforced on the scroll container in case there is one.</td>
		</tr>
	</table>
	<table class="Table SelectorsTable">
		<tr>
			<td>::after</td><td> pseudo-element matches a virtual last child of the selected element</td>
		</tr>
		<tr>
			<td>::before</td><td>creates a pseudo-element that is the first child of the element matched</td>
		</tr>
		<tr>
			<td>::first-letter</td><td>pseudo-element selects the first letter of the first line of a block</td>
		</tr>
		<tr>
			<td>::first-line</td><td>pseudo-element applies styles only to the first line of an element</td>
		</tr>
		<tr>
			<td>:active</td><td>pseudo-class matches when an element is being activated by the user</td>
		</tr>
		<tr>
			<td>:any</td><td>lets you quickly construct sets of similar selectors by establishing groups </td>
		</tr>
		<tr>
			<td>:any-link</td><td>pseudo-class represents an element that acts as the source anchor of a hyperlink independent of whether it has been visited</td>
		</tr>
		<tr>
			<td>:checked</td><td> pseudo-class selector represents any radio , checkbox  or option element that is checked or toggled to an on state.</td>
		</tr>
		<tr>
			<td>:dir</td><td>pseudo-class matches elements based on the directionality of the text contained in it</td>
		</tr>
		<tr>
			<td>:disabled</td><td>pseudo-class represents any disabled element</td>
		</tr>
		<tr>
			<td>:empty</td><td>pseudo-class represents any element that has no children at all</td>
		</tr>
		<tr>
			<td>:enabled</td><td> pseudo-class represents any enabled element. An element is enabled if it can be activated</td>
		</tr>
		<tr>
			<td>:first-child</td><td>pseudo-class represents any element that is the first among a group of sibling elements</td>
		</tr>
		<tr>
			<td>:first-of-type</td><td>pseudo-class represents the first sibling of its type in the list of children of its parent element.</td>
		</tr>
		<tr>
			<td>:focus</td><td> pseudo-class is applied when an element has received focus, either from the user selecting it with the use of a keyboard or by activating with the mouse </td>
		</tr>
		<tr>
			<td>:focus-within</td><td> pseudo-class matches any element that :focus pseudo-class matches or that has a descendant that the :focus pseudo-class matches.</td>
		</tr>
		<tr>
			<td>:hover</td><td> pseudo-class matches when the user designates an element with a pointing device, but does not necessarily activate it.</td>
		</tr>
		<tr>
			<td>:in-range</td><td> pseudo-class matches when an element has its value attribute inside the specified range limitations for this element.</td>
		</tr>
		<tr>
			<td>:lang</td><td> pseudo-class matches elements based on the language the element is determined to be in</td>
		</tr>
		<tr>
			<td>:last-child</td><td> pseudo-class represents any element that is the last among a group of sibling elements.</td>
		</tr>
		<tr>
			<td>:last-of-type</td><td> pseudo-class represents the last sibling with the given element name in the list of children of its parent element.</td>
		</tr>
		<tr>
			<td>:link</td><td> lets you select links inside elements. This will select any link which has not yet been visited, even those already styled using selector with other link-related pseudo-classes like :hover, :active or :visited</td>
		</tr>
		<tr>
			<td>:not</td><td> CSS pseudo-class, :not(X), is a functional notation taking a simple selector X as an argument.</td>
		</tr>
		<tr>
			<td>:nth-child</td><td>The :nth-child(an+b) CSS pseudo-class matches an element that has an+b-1 siblings before it in the document tree, for a given positive or zero value for n</td>
		</tr>
		<tr>
			<td>:nth-last-child</td><td> pseudo-class matches an element that has an+b-1 siblings after it in the document tree, for a given positive or zero value for n</td>
		</tr>
		<tr>
			<td>:nth-last-of-type</td><td> pseudo-class matches an element that has an+b-1 siblings with the same element name after it in the document tree, for a given positive or zero value for n, and has a parent element</td>
		</tr>
		<tr>
			<td>:nth-of-type</td><td> pseudo-class matches an element that has an+b-1 siblings with the same element name before it in the document tree, for a given positive or zero value for n, and has a parent element.</td>
		</tr>
		<tr>
			<td>:only-child</td><td> pseudo-class represents any element which is the only element in a context where a group of siblings would be expected</td>
		</tr>
		<tr>
			<td>:only-of-type</td><td> pseudo-class represents any element that has no siblings of the given type.</td>
		</tr>
		<tr>
			<td>:out-of-range</td><td> pseudo-class matches when an element has its value attribute outside the specified range limitations for this element.</td>
		</tr>
		<tr>
			<td>:placeholder-shown</td><td> pseudo-class represents any form element displaying placeholder text</td>
		</tr>
		<tr>
			<td>:read-only</td><td>pseudo-class matches when an element is not writable by the user.</td>
		</tr>
		<tr>
			<td>:read-write</td><td>pseudo-class matches when an element is editable by user like text input elements.</td>
		</tr>
		<tr>
			<td>:root</td><td> pseudo-class matches the root element of a tree representing the document</td>
		</tr>
		<tr>
			<td>:scope</td><td> pseudo-class matches the elements that are a reference point for selectors to match against</td>
		</tr>
		<tr>
			<td>:target</td><td> pseudo-class represents the unique element, if any, with an id matching the fragment identifier of the URI of the document.</td>
		</tr>
		<tr>
			<td>:visited</td><td>pseudo-class lets you select only links that have been visited</td>
		</tr>
		<tr>
			<td>Adjacent sibling selectors</td><td>This is referred to as an adjacent selector or next-sibling selector.</td>
		</tr>
		<tr>
			<td>Attribute selectors</td><td>Attribute selectors select an element using the presence of a given attribute or attribute value.</td>
		</tr>
		<tr>
			<td>Child selectors</td><td>The > combinator separates two selectors and matches only those elements matched by the second selector that are direct children of elements matched by the first</td>
		</tr>
		<tr>
			<td>Class selectors</td><td>In an HTML document, CSS class selectors match an element based on the contents of the element's class attribute</td>
		</tr>
		<tr>
			<td>Descendant selectors</td><td>The descendant combinator â typically represented by a single space ( ) character â combines two selectors such that elements matched by the second selector are selected if they have an ancestor element matching the first selector</td>
		</tr>
		<tr>
			<td>General sibling selectors</td><td>The ~ combinator separates two selectors and matches the second element only if it is preceded by the first, and both share a common parent.</td>
		</tr>
		<tr>
			<td>ID selectors</td><td>In an HTML document, CSS ID selectors match an element based on the contents of that element's id attribute, which must match exactly the value given in the selector.</td>
		</tr>
		<tr>
			<td>Pseudo-classes</td><td>A CSS pseudo-class is a keyword added to selectors that specifies a special state of the element to be selected.</td>
		</tr>
		<tr>
			<td>Type selectors</td><td>CSS type selectors match elements by node name</td>
		</tr>
		<tr>
			<td>Universal selectors</td><td>An asterisk (*) is the universal selector for CSS</td>
		</tr>
	</table>
	<table class="Table ShapesTable">
		<tr>
			<td>shape-image-threshold</td><td> property defines the alpha channel threshold used to extract the shape using an image as the value for shape-outside.</td>
		</tr>
		<tr>
			<td>shape-margin</td><td>property adds a margin to shape-outside.</td>
		</tr>
		<tr>
			<td>shape-outside</td><td>property uses shape values to define the float area for a float and will cause inline content to wrap around the shape instead of the float's bounding box.</td>
		</tr>
	</table>
	<table class="Table TextTable">
		<tr>
			<td>hyphens</td><td>property tells the browser how to hyphenate words when line-wrapping</td>
		</tr>
		<tr>
			<td>line-break</td><td>The line-break CSS property is used to specify how (or if) to break lines.</td>
		</tr>
		<tr>
			<td>overflow-wrap</td><td> property is used to specify whether or not the browser may break lines within words in order to prevent overflow when an otherwise unbreakable string is too long to fit in its containing box.</td>
		</tr>
		<tr>
			<td>tab-size</td><td>The tab-size CSS property is used to customize the width of a tab (U+0009) character.</td>
		</tr>
		<tr>
			<td>text-align</td><td>The text-align CSS property describes how inline content like text is aligned in its parent block element</td>
		</tr>
		<tr>
			<td>text-align-last</td><td>The text-align-last CSS property describes how the last line of a block or a line, right before a forced line break, is aligned.</td>
		</tr>
		<tr>
			<td>white-space</td><td>roperty is used to describe how whitespace inside the element is handled.</td>
		</tr>
		<tr>
			<td>word-break</td><td>property is used to specify whether to break lines within words.</td>
		</tr>
		<tr>
			<td>word-wrap</td><td>property is used to specify whether or not the browser may break lines within words in order to prevent overflow when an otherwise unbreakable string is too long to fit in its containing box.</td>
		</tr>
	</table>
	<table class="Table TextDecoTable">
		<tr>
			<td>text-decoration</td><td> property is used to set the text formatting to underline, overline or line-through</td>
		</tr>
		<tr>
			<td>text-decoration-color</td><td>property sets the line color used when drawing underlines, overlines, and strikethrough lines specified by the corresponding text-decoration-line property</td>
		</tr>
		<tr>
			<td>text-decoration-line</td><td>The text-decoration-line CSS property sets what kind of line decorations are added to an element.</td>
		</tr>
		<tr>
			<td>text-decoration-skip</td><td>property specifies what parts of the elementâs content any text decoration affecting the element must skip over</td>
		</tr>
		<tr>
			<td>text-decoration-style</td><td>The text-decoration-style CSS property defines the style of the lines specified by text-decoration-line</td>
		</tr>
		<tr>
			<td>text-emphasis</td><td> shorthand property </td>
		</tr>
		<tr>
			<td>text-emphasis-color</td><td>property defines the color used to draw an emphasis mark.</td>
		</tr>
		<tr>
			<td>text-emphasis-position</td><td>property describes where emphasis marks are drawn at</td>
		</tr>
		<tr>
			<td>text-emphasis-style</td><td>property defines the type of emphasis used</td>
		</tr>
		<tr>
			<td>text-shadow</td><td>property adds shadows to text. It accepts a comma-separated list of shadows to be applied to the text and text-decorations of the element.</td>
		</tr>
		<tr>
			<td>text-underline-position</td><td>property specifies the position of the underline which is set using the text-decoration property underline value</td>
		</tr>
	</table>
	<table class="Table TransformsTable">
		<tr>
			<td>backface-visibility</td><td>property determines whether or not the back face of the element is visible when facing the user</td>
		</tr>
		<tr>
			<td>perspective-origin</td><td> property determines the position the viewer is looking at</td>
		</tr>
		<tr>
			<td>transform</td><td> property lets you modify the coordinate space of the CSS visual formatting model. </td>
		</tr>
		<tr>
			<td>transform-box</td><td>property defines the layout box, to which the transform and transform-origin properties relate to.</td>
		</tr>
		<tr>
			<td>transform-origin</td><td> property lets you modify the origin for transformations of an element</td>
		</tr>
		<tr>
			<td>transform-origin</td><td>property lets you modify the origin for transformations of an element</td>
		</tr>
		<tr>
			<td>transform-style</td><td>property determines if the children of the element are positioned in the 3D-space or are flattened in the plane of the element.</td>
		</tr>
	</table>
	<table class="Table VariablesTable">
		<tr>
			<td>--*</td><td>Property names that are prefixed with --, like --example-name, represent custom properties that contain a value than can be reused throughout the document using the (var()) function.</td>
		</tr>
	</table>
	<table class="Table WritingModeTable">
		<tr>
			<td>direction</td><td>CSS property to match the direction of the text: rtl for languages written from right-to-left (like Hebrew or Arabic) text and ltr for other scripts. </td>
		</tr>
		<tr>
			<td>text-combine-upright</td><td>property specifies the combination of multiple characters into the space of a single character.</td>
		</tr>
		<tr>
			<td>text-orientation</td><td>property defines the orientation of the text in a line. </td>
		</tr>
		<tr>
			<td>unicode-bidi</td><td> property together with the direction property relates to the handling of bidirectional text in a document.</td>
		</tr>
		<tr>
			<td>writing-mode</td><td>The writing-mode property defines whether lines of text are laid out horizontally or vertically and the direction in which blocks progress.</td>
		</tr>
	</table>
