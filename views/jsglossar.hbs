<header class="Header">
	<h2 class="Heading">JS Glossar</h2>
</header>
<main class="Main">
	<table class="Table ArrayTable">
		<tr>
			<td>array.@@iterator</td><td>The initial value of the @@iterator property is the same function object as the initial value of the values() property.</td>
		</tr>
		<tr>
			<td>Array.@@species</td><td>The Array[@@species] accessor property returns the Array constructor.</td>
		</tr>
		<tr>
			<td>array.@@unscopables</td><td>The @@unscopable symbol property contains property names that were not included in the ECMAScript standard prior to the ES2015 version.</td>
		</tr>
		<tr>
			<td>array.concat</td><td>used to merge two or more arrays.</td>
		</tr>
		<tr>
			<td>array.copyWithin</td><td>shallow copies part of an array to another location in the same array and returns it, without modifying its size.</td>
		</tr>
		<tr>
			<td>array.entries</td><td>The entries() method returns a new Array Iterator object that contains the key/value pairs for each index in the array.</td>
		</tr>
		<tr>
			<td>array.every</td><td>tests whether all elements in the array pass the test implemented by the provided function.</td>
		</tr>
		<tr>
			<td>array.fill</td><td> fills all the elements of an array from a start index to an end index with a static value.</td>
		</tr>
		<tr>
			<td>array.filter</td><td>creates a new array with all elements that pass the test implemented by the provided function.</td>
		</tr>
		<tr>
			<td>array.find</td><td> returns the value of the first element in the array that satisfies the provided testing function</td>
		</tr>
		<tr>
			<td>array.findIndex</td><td>returns the index of the first element in the array that satisfies the provided testing function.</td>
		</tr>
		<tr>
			<td>array.forEach</td><td> executes a provided function once for each array element.</td>
		</tr>
		<tr>
			<td>Array.from</td><td>creates a new Array instance from an array-like or iterable object.</td>
		</tr>
		<tr>
			<td>array.includes</td><td>The includes() method determines whether an array includes a certain element, returning true or false as appropriate.</td>
		</tr>
		<tr>
			<td>array.indexOf</td><td>returns the first index at which a given element can be found in the array, or -1 if it is not present.</td>
		</tr>
		<tr>
			<td>Array.isArray</td><td>determines whether the passed value is an Array.</td>
		</tr>
		<tr>
			<td>array.join</td><td>The join() method joins all elements of an array (or an array-like object) into a string.</td>
		</tr>
		<tr>
			<td>array.keys</td><td>method returns a new Array Iterator that contains the keys for each index in the array</td>
		</tr>
		<tr>
			<td>array.lastIndexOf</td><td>method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex</td>
		</tr>
		<tr>
			<td>Array.length</td><td>The array length property sets or returns the number of elements in an array</td>
		</tr>
		<tr>
			<td>array.map</td><td>method creates a new array with the results of calling a provided function on every element in this array.</td>
		</tr>
		<tr>
			<td>Array.of</td><td>method creates a new Array instance with a variable number of arguments, regardless of number or type of the arguments.</td>
		</tr>
		<tr>
			<td>array.pop</td><td> method removes the last element from an array and returns that element.</td>
		</tr>
		<tr>
			<td>Array.prototype</td><td> property represents the prototype for the Array constructor and allows you to add new properties and methods to all Array objects.</td>
		</tr>
		<tr>
			<td>array.push</td><td>method adds one or more elements to the end of an array and returns the new length of the array.</td>
		</tr>
		<tr>
			<td>array.reduce</td><td>method applies a function against an accumulator and each element in the array (from left to right) to reduce it to a single value.</td>
		</tr>
		<tr>
			<td>array.reduceRight</td><td>method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value.</td>
		</tr>
		<tr>
			<td>array.reverse</td><td>method reverses an array in place. The first array element becomes the last, and the last array element becomes the first.</td>
		</tr>
		<tr>
			<td>array.shift</td><td>method removes the first element from an array and returns that element.</td>
		</tr>
		<tr>
			<td>array.slice</td><td> method returns a shallow copy of a portion of an array into a new array object selected from begin to end</td>
		</tr>
		<tr>
			<td>array.some</td><td> method tests whether some element in the array passes the test implemented by the provided function.</td>
		</tr>
		<tr>
			<td>array.sort</td><td>method sorts the elements of an array in place and returns the array</td>
		</tr>
		<tr>
			<td>array.splice</td><td>method changes the contents of an array by removing existing elements and/or adding new elements.</td>
		</tr>
		<tr>
			<td>array.toLocaleString</td><td> method returns a string representing the elements of the array</td>
		</tr>
		<tr>
			<td>array.toString</td><td>method returns a string representing the specified array and its elements.</td>
		</tr>
		<tr>
			<td>array.unshift</td><td>method adds one or more elements to the beginning of an array and returns the new length of the new array.</td>
		</tr>
		<tr>
			<td>array.values</td><td>returns a new Array Iterator object that contains the values for each index in the array.</td>
		</tr>
	</table>
	<table class="Table ArrayBufferTable">
	<tr>
		<td>ArrayBuffer</td><td>The ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffe</td>
	</tr>
	<tr>
		<td>ArrayBuffer.@@species</td><td>property returns the ArrayBuffer constructor.</td>
	</tr>
	<tr>
		<td>arrayBuffer.byteLength</td><td>property represents the length of an ArrayBuffer in bytes.</td>
	</tr>
	<tr>
		<td>ArrayBuffer.isView</td><td>returns true if arg is one of the ArrayBuffer views, such as typed array objects or a DataView; false otherwise.</td>
	</tr>
	<tr>
		<td>ArrayBuffer.prototype</td><td>property represents the prototype for the ArrayBuffer object.</td>
	</tr>
	<tr>
		<td>arrayBuffer.slice</td><td>method returns a new ArrayBuffer whose contents are a copy of this ArrayBuffer's bytes from begin, inclusive, up to end, exclusive.</td>
	</tr>
	<tr>
		<td>ArrayBuffer.transfer</td><td> method returns a new ArrayBuffer whose contents have been taken from the oldBuffer's data and then is either truncated or zero-extended by newByteLength</td>
	</tr>
	</table>
	<table class="Table AtomicsTable">
		<tr>
			<td>Atomics</td><td>object provides atomic operations as static methods</td>
		</tr>
		<tr>
			<td>Atomics.add</td><td>method adds a given value at a given position in the array and returns the old value at that position</td>
		</tr>
		<tr>
			<td>Atomics.and</td><td>method computes a bitwise AND with a given value at a given position in the array, and returns the old value at that position</td>
		</tr>
		<tr>
			<td>Atomics.compareExchange</td><td> method exchanges a given replacement value at a given position in the array, and returns the old value at that position, if a given expected value equals the old value</td>
		</tr>
		<tr>
			<td>Atomics.exchange</td><td> method exchanges a given value at a given position in the array and returns the old value at that position</td>
		</tr>
		<tr>
			<td>Atomics.isLockFree</td><td>method is used to determine whether to use locks or atomic operations</td>
		</tr>
		<tr>
			<td>Atomics.load</td><td>method returns a value at a given position in the array</td>
		</tr>
		<tr>
			<td>Atomics.or</td><td>method computes a bitwise OR with a given value at a given position in the array, and returns the old value at that position</td>
		</tr>
		<tr>
			<td>Atomics.store</td><td>The static Atomics.store() method stores a given value at the given position in the array and returns that value.</td>
		</tr>
		<tr>
			<td>Atomics.sub</td><td> method substracts a given value at a given position in the array and returns the old value at that position</td>
		</tr>
		<tr>
			<td>Atomics.wait</td><td>method verifies that a given position in an Int32Array still contains a given value and sleeps awaiting or times out.</td>
		</tr>
		<tr>
			<td>Atomics.wake</td><td>method wakes up some agents that are sleeping in the wait queue.</td>
		</tr>
		<tr>
			<td>Atomics.xor</td><td>method computes a bitwise XOR with a given value at a given position in the array, and returns the old value at that position</td>
		</tr>
	</table>
	<table class="Table BooleanTable">
		<tr>
			<td>Boolean</td><td>object wrapper for a boolean value</td>
		</tr>
		<tr>
			<td>Boolean.prototype</td><td>property represents the prototype for the Boolean constructor.</td>
		</tr>
		<tr>
			<td>boolean.toString</td><td>method returns a string representing the specified Boolean object.</td>
		</tr>
		<tr>
			<td>boolean.valueOf</td><td>method returns the primitive value of a Boolean object.</td>
		</tr>
	</table>
	<table class="Table ClassesTable">
		<tr>
			<td>Classes</td><td>syntactical sugar over JavaScript's existing prototype-based inheritance</td>
		</tr>
		<tr>
			<td>constructor</td><td> method is a special method for creating and initializing an object created with a class.</td>
		</tr>
		<tr>
			<td>extends</td><td>keyword is used in class declarations or class expressions to create a class which is a child of another class.</td>
		</tr>
		<tr>
			<td>static</td><td>keyword defines a static method for a class.</td>
		</tr>
	</table>
</main>